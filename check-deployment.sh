#!/bin/bash

# ===========================================
# SCRIPT DE V√âRIFICATION PR√â-D√âPLOIEMENT
# ===========================================

set -euo pipefail

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${BLUE}[CHECK]${NC} $1"; }
success() { echo -e "${GREEN}[‚úì]${NC} $1"; }
warning() { echo -e "${YELLOW}[‚ö†]${NC} $1"; }
error() { echo -e "${RED}[‚úó]${NC} $1"; exit 1; }

# V√©rifications
log "V√©rification des fichiers critiques..."

# 1. Fichiers de configuration
if [ ! -f ".env.production" ]; then
    error "Fichier .env.production manquant"
fi
success "Fichier .env.production pr√©sent"

# 2. Dockerfiles
if [ ! -f "Dockerfile.frontend" ]; then
    error "Dockerfile.frontend manquant"
fi
success "Dockerfile.frontend pr√©sent"

if [ ! -f "backend/Dockerfile" ]; then
    error "Dockerfile backend manquant"
fi
success "Dockerfile backend pr√©sent"

# 3. Docker Compose
if [ ! -f "docker-compose.production.yml" ]; then
    error "docker-compose.production.yml manquant"
fi
success "docker-compose.production.yml pr√©sent"

# 4. Fichiers statiques
if [ ! -d "public" ]; then
    error "Dossier public manquant"
fi
success "Dossier public pr√©sent"

if [ ! -d "public/locales" ]; then
    warning "Dossier traductions manquant"
fi
success "Traductions pr√©sentes"

# 5. Configuration Django
if [ ! -f "backend/backend/settings_production.py" ]; then
    error "settings_production.py manquant"
fi
success "Configuration Django production pr√©sente"

# 6. Scripts de d√©ploiement
if [ ! -f "deploy.sh" ]; then
    error "Script deploy.sh manquant"
fi
success "Script de d√©ploiement pr√©sent"

# 7. V√©rification des permissions
if [ ! -x "deploy.sh" ]; then
    warning "Script deploy.sh non ex√©cutable"
    chmod +x deploy.sh
    success "Permissions corrig√©es"
fi

# 8. V√©rification des d√©pendances
log "V√©rification des d√©pendances..."

if [ ! -f "package.json" ]; then
    error "package.json manquant"
fi
success "package.json pr√©sent"

if [ ! -f "backend/requirements.txt" ]; then
    error "requirements.txt manquant"
fi
success "requirements.txt pr√©sent"

# 9. V√©rification des variables d'environnement critiques
log "V√©rification des variables d'environnement..."

if ! grep -q "SECRET_KEY=" .env.production; then
    error "SECRET_KEY manquante dans .env.production"
fi
success "SECRET_KEY configur√©e"

if ! grep -q "DB_PASSWORD=" .env.production; then
    error "DB_PASSWORD manquante dans .env.production"
fi
success "DB_PASSWORD configur√©e"

# 10. V√©rification de la s√©curit√©
log "V√©rification de la s√©curit√©..."

if grep -q "DEBUG=True" .env.production; then
    error "DEBUG=True d√©tect√© en production"
fi
success "DEBUG d√©sactiv√© en production"

if grep -q "django-insecure" .env.production; then
    error "Cl√© secr√®te par d√©faut d√©tect√©e"
fi
success "Cl√© secr√®te personnalis√©e"

# 11. V√©rification des ports
log "V√©rification des ports..."

if ! grep -q "80:80" docker-compose.production.yml; then
    warning "Port 80 non configur√©"
fi

if ! grep -q "443:443" docker-compose.production.yml; then
    warning "Port 443 non configur√©"
fi

# 12. V√©rification des volumes
log "V√©rification des volumes..."

if ! grep -q "postgres_data" docker-compose.production.yml; then
    warning "Volume PostgreSQL non configur√©"
fi

if ! grep -q "redis_data" docker-compose.production.yml; then
    warning "Volume Redis non configur√©"
fi

# R√©sum√©
echo ""
log "R√©sum√© des v√©rifications:"
echo "=========================="
success "‚úÖ Projet pr√™t pour le d√©ploiement"
echo ""
log "Prochaines √©tapes:"
echo "1. Configurer les variables d'environnement dans .env.production"
echo "2. G√©n√©rer les certificats SSL"
echo "3. Ex√©cuter: ./deploy.sh"
echo ""
success "üéâ V√©rification termin√©e avec succ√®s !"
