# Generated by Django 4.2.23 on 2025-10-25 01:44

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('abattoir', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('ALIMENT_SHEPTEL', 'Gestion Aliments et Cheptel'), ('PRODUCTION', 'Gestion Abattage et Production'), ('SUPERVISEUR', 'Superviseur Général')], default='ALIMENT_SHEPTEL', help_text="Définit le rôle et les permissions de l'utilisateur", max_length=20, verbose_name="Type d'utilisateur")),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Numéro de téléphone')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Adresse')),
                ('email_verified', models.BooleanField(default=False, help_text="Indique si l'email a été vérifié", verbose_name='Email vérifié')),
                ('phone_verified', models.BooleanField(default=False, help_text='Indique si le numéro de téléphone a été vérifié', verbose_name='Téléphone vérifié')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Dernière IP de connexion')),
                ('login_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentatives de connexion échouées')),
                ('locked_until', models.DateTimeField(blank=True, help_text="Date jusqu'à laquelle le compte est verrouillé", null=True, verbose_name="Verrouillé jusqu'à")),
                ('password_changed_at', models.DateTimeField(auto_now_add=True, verbose_name='Mot de passe changé le')),
                ('refresh_token', models.TextField(blank=True, null=True, verbose_name='Token de rafraîchissement')),
                ('device_fingerprint', models.CharField(blank=True, max_length=255, null=True, verbose_name="Empreinte de l'appareil")),
                ('language', models.CharField(choices=[('fr', 'Français'), ('ar', 'العربية'), ('en', 'English')], default='fr', max_length=10, verbose_name='Langue préférée')),
                ('timezone', models.CharField(default='Africa/Algiers', max_length=50, verbose_name='Fuseau horaire')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notifications par email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Notifications par SMS')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Notifications push')),
                ('is_active', models.BooleanField(default=True, help_text='Désignez si cet utilisateur doit être traité comme actif.', verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='Prénom')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Nom')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse e-mail')),
                ('abattoir', models.ForeignKey(blank=True, help_text='Abattoir auquel cet utilisateur est assigné', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='utilisateurs', to='abattoir.abattoir', verbose_name='Abattoir assigné')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('device_fingerprint', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Session utilisateur',
                'verbose_name_plural': 'Sessions utilisateur',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('is_used', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Token de réinitialisation',
                'verbose_name_plural': 'Tokens de réinitialisation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailVerificationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('is_used', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_verification_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Token de vérification email',
                'verbose_name_plural': 'Tokens de vérification email',
                'ordering': ['-created_at'],
            },
        ),
    ]
