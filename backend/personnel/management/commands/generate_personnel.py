from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from abattoir.models import Abattoir
from personnel.models import Role, Personnel
import random
from datetime import date, timedelta

User = get_user_model()

# Donn√©es pour g√©n√©rer des noms et informations
PRENOMS = [
    'Ahmed', 'Mohamed', 'Ali', 'Omar', 'Youssef', 'Karim', 'Said', 'Hassan',
    'Fatima', 'Aicha', 'Khadija', 'Zineb', 'Naima', 'Samira', 'Latifa', 'Malika',
    'Rayan', 'Yanis', 'Adam', 'Ibrahim', 'Amine', 'Bilal', 'Tarek', 'Nassim',
    'Salma', 'Ines', 'Lina', 'Nour', 'Yasmine', 'Hiba', 'Dina', 'Rania'
]

NOMS = [
    'Boukabous', 'Benali', 'Khelil', 'Mansouri', 'Boumediene', 'Taleb', 'Cherif',
    'Boukhari', 'Saadi', 'Bouaziz', 'Kadri', 'Bouhali', 'Bouchene', 'Boukhari',
    'Bouazza', 'Boukhari', 'Bouaziz', 'Bouhali', 'Bouchene', 'Boukhari', 'Bouazza'
]

VILLES = [
    'Alger', 'Oran', 'Constantine', 'Annaba', 'Blida', 'Batna', 'Djelfa', 'Setif',
    'Sidi Bel Abbes', 'Biskra', 'Tebessa', 'El Oued', 'Skikda', 'Tiaret', 'Bejaia',
    'Tlemcen', 'Bordj Bou Arreridj', 'Bechar', 'Mostaganem', 'M\'Sila'
]

class Command(BaseCommand):
    help = 'G√©n√®re du personnel pour tous les abattoirs (15-70 employ√©s par abattoir)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='Supprime tout le personnel existant avant de g√©n√©rer',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ D√©but de la g√©n√©ration du personnel pour tous les abattoirs')
        )
        
        # R√©cup√©rer tous les abattoirs
        abattoirs = Abattoir.objects.all()
        if not abattoirs.exists():
            self.stdout.write(
                self.style.ERROR('‚ùå Aucun abattoir trouv√© dans la base de donn√©es')
            )
            return
        
        self.stdout.write(f'üìä {abattoirs.count()} abattoirs trouv√©s')
        
        # Cr√©er les r√¥les par d√©faut
        self.create_default_roles()
        
        # Supprimer le personnel existant si demand√©
        if options['clear']:
            Personnel.objects.all().delete()
            self.stdout.write(
                self.style.WARNING('üóëÔ∏è  Tout le personnel existant a √©t√© supprim√©')
            )
        
        total_personnel_created = 0
        
        for abattoir in abattoirs:
            # G√©n√©rer un nombre al√©atoire d'employ√©s entre 15 et 70
            num_employees = random.randint(15, 70)
            self.stdout.write(f'\nüè≠ Abattoir: {abattoir.nom} - {num_employees} employ√©s √† cr√©er')
            
            # V√©rifier le personnel existant
            existing_count = Personnel.objects.filter(abattoir=abattoir).count()
            if existing_count > 0:
                self.stdout.write(f'‚ÑπÔ∏è  {existing_count} employ√©s existants trouv√©s')
                # Supprimer le personnel existant pour recommencer proprement
                Personnel.objects.filter(abattoir=abattoir).delete()
                self.stdout.write(f'üóëÔ∏è  Personnel existant supprim√©')
            
            # G√©n√©rer le nouveau personnel
            personnel_created = self.generate_personnel_for_abattoir(abattoir, num_employees)
            if personnel_created:
                total_personnel_created += len(personnel_created)
        
        self.stdout.write(f'\nüéâ G√©n√©ration termin√©e!')
        self.stdout.write(f'üìä Total: {total_personnel_created} employ√©s cr√©√©s')
        
        # Statistiques finales
        self.stdout.write(f'\nüìà Statistiques finales:')
        for abattoir in abattoirs:
            count = Personnel.objects.filter(abattoir=abattoir).count()
            responsable = Personnel.objects.filter(
                abattoir=abattoir, 
                role__nom='RESPONSABLE_ABATTOIR'
            ).first()
            responsable_name = f"{responsable.prenom} {responsable.nom}" if responsable else "Non assign√©"
            self.stdout.write(f'  ‚Ä¢ {abattoir.nom}: {count} employ√©s - Responsable: {responsable_name}')

    def create_default_roles(self):
        """Cr√©e les r√¥les par d√©faut s'ils n'existent pas"""
        roles_data = [
            ('RESPONSABLE_ABATTOIR', 'Responsable de l\'abattoir'),
            ('BOUCHER', 'Boucher'),
            ('VETERINAIRE', 'V√©t√©rinaire'),
            ('TECHNICIEN', 'Technicien'),
            ('EMPLOYE_GENERAL', 'Employ√© g√©n√©ral'),
            ('SECURITE', 'Agent de s√©curit√©'),
            ('NETTOYAGE', 'Agent de nettoyage'),
            ('MANUTENTION', 'Agent de manutention')
        ]
        
        for code, nom in roles_data:
            role, created = Role.objects.get_or_create(
                nom=code,
                defaults={'description': f'R√¥le de {nom.lower()}'}
            )
            if created:
                self.stdout.write(f'‚úÖ R√¥le cr√©√©: {nom}')

    def generate_personnel_for_abattoir(self, abattoir, num_employees):
        """G√©n√®re du personnel pour un abattoir donn√©"""
        self.stdout.write(f"\nüè≠ G√©n√©ration du personnel pour l'abattoir: {abattoir.nom}")
        
        # R√©cup√©rer les r√¥les disponibles
        roles = list(Role.objects.all())
        
        # Trouver le r√¥le responsable
        responsable_role = Role.objects.filter(nom='RESPONSABLE_ABATTOIR').first()
        if not responsable_role:
            self.stdout.write(self.style.ERROR("‚ùå R√¥le RESPONSABLE_ABATTOIR non trouv√©"))
            return []
        
        # V√©rifier si l'abattoir a d√©j√† un responsable
        existing_responsable = Personnel.objects.filter(
            abattoir=abattoir, 
            role=responsable_role,
            statut='ACTIF'
        ).first()
        
        personnel_created = []
        
        # 1. Cr√©er le responsable s'il n'existe pas
        if not existing_responsable:
            self.stdout.write(f"üë§ Cr√©ation du responsable pour {abattoir.nom}")
            responsable = self.create_responsable(abattoir, responsable_role)
            if responsable:
                personnel_created.append(responsable)
                self.stdout.write(f"‚úÖ Responsable cr√©√©: {responsable.prenom} {responsable.nom}")
        else:
            self.stdout.write(f"‚ÑπÔ∏è  Responsable existant: {existing_responsable.prenom} {existing_responsable.nom}")
            personnel_created.append(existing_responsable)
        
        # 2. Cr√©er les autres employ√©s
        remaining_employees = num_employees - 1  # -1 pour le responsable
        self.stdout.write(f"üë• Cr√©ation de {remaining_employees} employ√©s suppl√©mentaires...")
        
        for i in range(remaining_employees):
            # Choisir un r√¥le al√©atoire (sauf responsable)
            other_roles = [role for role in roles if role.nom != 'RESPONSABLE_ABATTOIR']
            if not other_roles:
                other_roles = roles  # Fallback si pas d'autres r√¥les
            
            role = random.choice(other_roles)
            employee = self.create_employee(abattoir, role, i + 2)  # +2 car responsable = 1
            if employee:
                personnel_created.append(employee)
        
        self.stdout.write(f"‚úÖ {len(personnel_created)} employ√©s cr√©√©s pour {abattoir.nom}")
        return personnel_created

    def create_responsable(self, abattoir, role):
        """Cr√©e un responsable avec toutes les informations"""
        try:
            # G√©n√©rer des donn√©es compl√®tes
            prenom = random.choice(PRENOMS)
            nom = random.choice(NOMS)
            date_naissance = self.fake_date_of_birth(min_age=30, max_age=60)
            
            # Cr√©er le responsable
            responsable = Personnel.objects.create(
                nom=nom,
                prenom=prenom,
                date_naissance=date_naissance,
                lieu_naissance=random.choice(VILLES),
                sexe=random.choice(['M', 'F']),
                nationalite='Alg√©rienne',
                numero_carte_identite=f"{random.randint(1000000000, 9999999999)}",
                date_emission_carte=self.fake_date_between(
                    start_date=date.today() - timedelta(days=365*10), 
                    end_date=date.today()
                ),
                lieu_emission_carte=random.choice(VILLES),
                telephone=self.fake_phone_number(),
                telephone_urgence=self.fake_phone_number(),
                email=self.fake_email(prenom, nom),
                adresse=self.fake_street_address(),
                wilaya=abattoir.wilaya,
                commune=abattoir.commune,
                abattoir=abattoir,
                role=role,
                numero_employe=f"EMP{str(abattoir.id).zfill(3)}0001",  # Premier employ√©
                date_embauche=self.fake_date_between(
                    start_date=date.today() - timedelta(days=365*5), 
                    end_date=date.today() - timedelta(days=365)
                ),
                statut='ACTIF',
                notes=f"Responsable de l'abattoir {abattoir.nom} depuis {self.fake_date_between(start_date=date.today() - timedelta(days=365*5), end_date=date.today() - timedelta(days=365)).year}",
                competences=[
                    "Gestion d'√©quipe",
                    "Planification de production",
                    "Contr√¥le qualit√©",
                    "Gestion administrative",
                    "S√©curit√© au travail"
                ],
                formations=[
                    "Formation HACCP",
                    "Gestion d'abattoir",
                    "S√©curit√© alimentaire",
                    "Management d'√©quipe"
                ]
            )
            
            return responsable
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur lors de la cr√©ation du responsable: {e}"))
            return None

    def create_employee(self, abattoir, role, employee_number):
        """Cr√©e un employ√© avec des informations compl√®tes"""
        try:
            # G√©n√©rer des donn√©es
            prenom = random.choice(PRENOMS)
            nom = random.choice(NOMS)
            date_naissance = self.fake_date_of_birth(min_age=18, max_age=65)
            
            # Cr√©er l'employ√©
            employee = Personnel.objects.create(
                nom=nom,
                prenom=prenom,
                date_naissance=date_naissance,
                lieu_naissance=random.choice(VILLES),
                sexe=random.choice(['M', 'F']),
                nationalite='Alg√©rienne',
                numero_carte_identite=f"{random.randint(1000000000, 9999999999)}",
                date_emission_carte=self.fake_date_between(
                    start_date=date.today() - timedelta(days=365*10), 
                    end_date=date.today()
                ),
                lieu_emission_carte=random.choice(VILLES),
                telephone=self.fake_phone_number(),
                telephone_urgence=self.fake_phone_number(),
                email=self.fake_email(prenom, nom),
                adresse=self.fake_street_address(),
                wilaya=abattoir.wilaya,
                commune=abattoir.commune,
                abattoir=abattoir,
                role=role,
                numero_employe=f"EMP{str(abattoir.id).zfill(3)}{str(employee_number).zfill(4)}",
                date_embauche=self.fake_date_between(
                    start_date=date.today() - timedelta(days=365*3), 
                    end_date=date.today()
                ),
                statut=random.choice(['ACTIF', 'ACTIF', 'ACTIF', 'CONGE']),  # 75% actif, 25% cong√©
                notes=f"Employ√© {role.get_nom_display()} √† l'abattoir {abattoir.nom}",
                competences=self.generate_competences_for_role(role),
                formations=self.generate_formations_for_role(role)
            )
            
            return employee
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Erreur lors de la cr√©ation de l'employ√©: {e}"))
            return None

    def generate_competences_for_role(self, role):
        """G√©n√®re des comp√©tences selon le r√¥le"""
        competences_base = {
            'RESPONSABLE_ABATTOIR': [
                "Gestion d'√©quipe",
                "Planification de production",
                "Contr√¥le qualit√©",
                "Gestion administrative"
            ],
            'BOUCHER': [
                "D√©coupe de viande",
                "Hygi√®ne alimentaire",
                "Utilisation d'outils",
                "Contr√¥le qualit√©"
            ],
            'VETERINAIRE': [
                "Inspection sanitaire",
                "Diagnostic v√©t√©rinaire",
                "Contr√¥le qualit√©",
                "R√©glementation sanitaire"
            ],
            'TECHNICIEN': [
                "Maintenance d'√©quipements",
                "R√©paration m√©canique",
                "√âlectricit√©",
                "S√©curit√© au travail"
            ],
            'EMPLOYE_GENERAL': [
                "Nettoyage",
                "Manutention",
                "Hygi√®ne",
                "Travail d'√©quipe"
            ]
        }
        
        return competences_base.get(role.nom, [
            "Travail d'√©quipe",
            "Hygi√®ne",
            "S√©curit√© au travail"
        ])

    def generate_formations_for_role(self, role):
        """G√©n√®re des formations selon le r√¥le"""
        formations_base = {
            'RESPONSABLE_ABATTOIR': [
                "Formation HACCP",
                "Gestion d'abattoir",
                "Management d'√©quipe",
                "S√©curit√© alimentaire"
            ],
            'BOUCHER': [
                "Formation d√©coupe",
                "Hygi√®ne alimentaire",
                "S√©curit√© au travail"
            ],
            'VETERINAIRE': [
                "Formation v√©t√©rinaire",
                "Inspection sanitaire",
                "R√©glementation"
            ],
            'TECHNICIEN': [
                "Formation technique",
                "S√©curit√© au travail",
                "Maintenance pr√©ventive"
            ],
            'EMPLOYE_GENERAL': [
                "Hygi√®ne et s√©curit√©",
                "Travail d'√©quipe"
            ]
        }
        
        return formations_base.get(role.nom, [
            "Formation de base",
            "Hygi√®ne et s√©curit√©"
        ])

    def fake_phone_number(self):
        return f"0{random.randint(5, 7)}{random.randint(10000000, 99999999)}"

    def fake_email(self, first_name, last_name):
        domains = ['gmail.com', 'yahoo.fr', 'hotmail.com', 'outlook.com']
        return f"{first_name.lower()}.{last_name.lower()}@{random.choice(domains)}"

    def fake_street_address(self):
        streets = ['Rue de la Paix', 'Avenue des Martyrs', 'Boulevard de la R√©publique', 
                   'Rue du Commerce', 'Avenue de l\'Ind√©pendance', 'Rue de la Libert√©']
        return f"{random.randint(1, 200)} {random.choice(streets)}"

    def fake_date_of_birth(self, min_age=18, max_age=65):
        today = date.today()
        start_date = today.replace(year=today.year - max_age)
        end_date = today.replace(year=today.year - min_age)
        time_between = end_date - start_date
        days_between = time_between.days
        random_days = random.randint(0, days_between)
        return start_date + timedelta(days=random_days)

    def fake_date_between(self, start_date, end_date):
        time_between = end_date - start_date
        days_between = time_between.days
        random_days = random.randint(0, days_between)
        return start_date + timedelta(days=random_days)





