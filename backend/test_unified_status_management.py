#!/usr/bin/env python
"""
Script de test pour v√©rifier la gestion unifi√©e des statuts des b√™tes
"""
import os
import sys
import django

# Ajouter le chemin du projet
sys.path.append('/Users/rayan/ALVIAR DASHBOARD COMMERCIALISATION/backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from bete.models import Bete
from abattoir.models import Stabulation
from bete.status_manager import BeteStatusManager

def test_status_management():
    print("üß™ TEST DE LA GESTION UNIFI√âE DES STATUTS")
    print("=" * 50)
    
    # 1. V√©rifier l'√©tat initial
    print("\n1. √âtat initial:")
    for statut in ['VIVANT', 'EN_STABULATION', 'ABATTU', 'MORT', 'VENDU']:
        count = Bete.objects.filter(statut=statut).count()
        print(f"   - {statut}: {count}")
    
    # 2. Cr√©er une stabulation de test
    print("\n2. Cr√©ation d'une stabulation de test...")
    
    # R√©cup√©rer quelques b√™tes vivantes
    betes_vivantes = Bete.objects.filter(statut='VIVANT')[:3]
    if not betes_vivantes.exists():
        print("‚ùå Aucune b√™te vivante trouv√©e pour le test")
        return
    
    print(f"   B√™tes s√©lectionn√©es: {[b.num_boucle for b in betes_vivantes]}")
    
    # Cr√©er une stabulation
    stabulation = Stabulation.objects.create(
        abattoir=betes_vivantes.first().abattoir,
        type_bete='BOVIN',
        date_debut=django.utils.timezone.now()
    )
    
    # Ajouter les b√™tes √† la stabulation
    stabulation.betes.set(betes_vivantes)
    
    print(f"   Stabulation cr√©√©e: {stabulation.numero_stabulation}")
    print(f"   B√™tes dans la stabulation: {stabulation.betes.count()}")
    
    # 3. V√©rifier le statut apr√®s ajout
    print("\n3. Statut apr√®s ajout √† la stabulation:")
    for bete in betes_vivantes:
        bete.refresh_from_db()
        print(f"   - {bete.num_boucle}: {bete.statut}")
    
    # 4. Finaliser la stabulation
    print("\n4. Finalisation de la stabulation...")
    try:
        stabulation.terminer_stabulation()
        print("   ‚úÖ Stabulation finalis√©e")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la finalisation: {e}")
        return
    
    # 5. V√©rifier le statut apr√®s finalisation
    print("\n5. Statut apr√®s finalisation:")
    for bete in betes_vivantes:
        bete.refresh_from_db()
        print(f"   - {bete.num_boucle}: {bete.statut}")
    
    # 6. V√©rifier l'√©tat final
    print("\n6. √âtat final:")
    for statut in ['VIVANT', 'EN_STABULATION', 'ABATTU', 'MORT', 'VENDU']:
        count = Bete.objects.filter(statut=statut).count()
        print(f"   - {statut}: {count}")
    
    # 7. Nettoyer
    print("\n7. Nettoyage...")
    stabulation.delete()
    print("   ‚úÖ Stabulation de test supprim√©e")
    
    print("\nüéâ Test termin√© avec succ√®s!")

if __name__ == "__main__":
    test_status_management()
