import { apiClient } from './client';
import { Role, RolesResponse } from '@/types';

export class RolesService {
    /**
     * R√©cup√®re tous les r√¥les
     */
    static async getRoles(): Promise<Role[]> {
        try {
            console.log('üîç R√©cup√©ration des r√¥les depuis l\'API...');

            const response = await apiClient.get<Role[]>('/roles');

            console.log('‚úÖ R√¥les r√©cup√©r√©s avec succ√®s:', response);

            // L'API retourne directement un tableau de r√¥les
            return response.data || response || [];
        } catch (error: any) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des r√¥les:', error);
            throw new Error(`Erreur lors de la r√©cup√©ration des r√¥les: ${error.message || 'Erreur inconnue'}`);
        }
    }

    /**
     * R√©cup√®re un r√¥le par son ID
     */
    static async getRoleById(id: number): Promise<Role> {
        try {
            console.log(`üîç R√©cup√©ration du r√¥le ${id} depuis l'API...`);

            const response = await apiClient.get<Role>(`/roles/${id}`);

            console.log(`‚úÖ R√¥le ${id} r√©cup√©r√© avec succ√®s:`, response);

            return response.data || response;
        } catch (error: any) {
            console.error(`‚ùå Erreur lors de la r√©cup√©ration du r√¥le ${id}:`, error);
            throw new Error(`Erreur lors de la r√©cup√©ration du r√¥le: ${error.message || 'Erreur inconnue'}`);
        }
    }

    /**
     * Cr√©e un nouveau r√¥le
     */
    static async createRole(roleData: { name: string; permissions?: number[] }): Promise<Role> {
        try {
            console.log('üîç Cr√©ation d\'un nouveau r√¥le...', roleData);

            const response = await apiClient.post<Role>('/roles', roleData);

            console.log('‚úÖ R√¥le cr√©√© avec succ√®s:', response);

            return response.data || response;
        } catch (error: any) {
            console.error('‚ùå Erreur lors de la cr√©ation du r√¥le:', error);
            throw new Error(`Erreur lors de la cr√©ation du r√¥le: ${error.message || 'Erreur inconnue'}`);
        }
    }

    /**
     * Met √† jour un r√¥le
     */
    static async updateRole(id: number, roleData: { name?: string }): Promise<Role> {
        try {
            console.log(`üîç Mise √† jour du r√¥le ${id}...`, roleData);

            const response = await apiClient.put<Role>(`/roles/${id}`, roleData);

            console.log(`‚úÖ R√¥le ${id} mis √† jour avec succ√®s:`, response);

            return response.data || response;
        } catch (error: any) {
            console.error(`‚ùå Erreur lors de la mise √† jour du r√¥le ${id}:`, error);
            throw new Error(`Erreur lors de la mise √† jour du r√¥le: ${error.message || 'Erreur inconnue'}`);
        }
    }

    /**
     * Supprime un r√¥le
     */
    static async deleteRole(id: number): Promise<void> {
        try {
            console.log(`üîç Suppression du r√¥le ${id}...`);

            await apiClient.delete(`/roles/${id}`);

            console.log(`‚úÖ R√¥le ${id} supprim√© avec succ√®s`);
        } catch (error: any) {
            console.error(`‚ùå Erreur lors de la suppression du r√¥le ${id}:`, error);
            throw new Error(`Erreur lors de la suppression du r√¥le: ${error.message || 'Erreur inconnue'}`);
        }
    }
}
