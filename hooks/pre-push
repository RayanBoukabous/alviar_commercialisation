#!/bin/bash

# ===========================================
# PRE-PUSH HOOK - ALVIAR DASHBOARD
# ===========================================

set -e

echo "üîç Running pre-push checks..."

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log() {
    echo -e "${BLUE}[PRE-PUSH]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# V√©rifier que nous ne poussons pas sur la branche main directement
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$current_branch" = "main" ]; then
    warning "Pushing directly to main branch - Make sure this is intentional!"
    read -p "Are you sure you want to push to main? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        error "Push cancelled"
    fi
fi

# V√©rifier que tous les tests passent
log "Running tests..."

# Tests Backend (Django)
if [ -d "backend" ]; then
    log "Running Django tests..."
    cd backend
    
    # V√©rifier que les migrations sont √† jour
    python manage.py makemigrations --check --dry-run || error "Migrations are not up to date"
    
    # V√©rifier la configuration Django
    python manage.py check --deploy || warning "Django configuration issues detected"
    
    # Lancer les tests si possible
    if [ -f "manage.py" ]; then
        python manage.py test --verbosity=0 || warning "Some Django tests failed"
    fi
    
    cd ..
    success "Backend tests completed"
fi

# Tests Frontend (Next.js)
if [ -f "package.json" ]; then
    log "Running Frontend tests..."
    
    # V√©rifier que les d√©pendances sont install√©es
    if [ ! -d "node_modules" ]; then
        log "Installing dependencies..."
        npm install --silent
    fi
    
    # V√©rifier la syntaxe TypeScript
    if command -v npx >/dev/null 2>&1; then
        npx tsc --noEmit --skipLibCheck || warning "TypeScript compilation issues detected"
    fi
    
    # Lancer les tests si disponibles
    if npm run test --silent 2>/dev/null; then
        success "Frontend tests passed"
    else
        warning "Frontend tests not configured or failed"
    fi
fi

# V√©rifier la qualit√© du code
log "Running code quality checks..."

# V√©rifier les fichiers Python avec flake8 si disponible
if command -v flake8 >/dev/null 2>&1; then
    for file in $(find backend -name "*.py" -not -path "*/migrations/*" -not -path "*/__pycache__/*"); do
        if [ -f "$file" ]; then
            flake8 "$file" || warning "Code quality issues in $file"
        fi
    done
fi

# V√©rifier les fichiers TypeScript/JavaScript avec ESLint si disponible
if command -v npx >/dev/null 2>&1; then
    if [ -f "package.json" ] && grep -q "eslint" package.json; then
        npx eslint src/ --ext .ts,.tsx,.js,.jsx --max-warnings 0 || warning "ESLint issues detected"
    fi
fi

# V√©rifier la s√©curit√©
log "Running security checks..."

# V√©rifier les fichiers sensibles
SENSITIVE_PATTERNS=(
    "password"
    "secret"
    "key"
    "token"
    "credential"
)

for pattern in "${SENSITIVE_PATTERNS[@]}"; do
    if git diff --name-only | grep -i "$pattern" > /dev/null; then
        warning "Potential sensitive file detected with pattern: $pattern"
    fi
done

# V√©rifier les fichiers de configuration
if [ -f "backend/settings.py" ]; then
    if grep -q "DEBUG = True" backend/settings.py; then
        warning "DEBUG is enabled in settings.py - Consider using settings_production.py for production"
    fi
    
    if grep -q "SECRET_KEY = 'django-insecure" backend/settings.py; then
        warning "Default SECRET_KEY detected - Please use environment variables in production"
    fi
fi

# V√©rifier les fichiers Docker
if [ -f "docker-compose.yml" ] || [ -f "docker-compose.production.yml" ]; then
    log "Checking Docker configuration..."
    
    # V√©rifier que les variables d'environnement sont utilis√©es
    if grep -q "password" docker-compose*.yml; then
        warning "Hardcoded passwords detected in Docker Compose files"
    fi
fi

# V√©rifier la taille du repository
log "Checking repository size..."

repo_size=$(du -sh . | cut -f1)
log "Repository size: $repo_size"

# V√©rifier les fichiers volumineux
large_files=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./node_modules/*" 2>/dev/null || true)
if [ -n "$large_files" ]; then
    warning "Large files detected:"
    echo "$large_files"
    warning "Consider using Git LFS for large files"
fi

# V√©rifier les commits
log "Checking commit messages..."

# V√©rifier que les messages de commit sont descriptifs
recent_commits=$(git log --oneline -5)
if echo "$recent_commits" | grep -q "WIP\|fix\|update\|change"; then
    warning "Some commit messages are not descriptive enough"
fi

# V√©rifier la coh√©rence des branches
log "Checking branch consistency..."

# V√©rifier que la branche est √† jour avec origin
if git remote | grep -q origin; then
    git fetch origin
    if [ "$current_branch" != "main" ]; then
        if ! git merge-base --is-ancestor origin/main HEAD; then
            warning "Branch is not up to date with origin/main"
        fi
    fi
fi

# V√©rifier les fichiers de configuration de production
log "Checking production configuration..."

if [ -f "backend/settings_production.py" ]; then
    success "Production settings file found"
else
    warning "Production settings file not found - Consider creating one"
fi

if [ -f "docker-compose.production.yml" ]; then
    success "Production Docker Compose file found"
else
    warning "Production Docker Compose file not found"
fi

if [ -f "deploy.sh" ]; then
    success "Deployment script found"
else
    warning "Deployment script not found"
fi

# V√©rifier la documentation
log "Checking documentation..."

if [ -f "README.md" ]; then
    success "README.md found"
else
    warning "README.md not found - Consider adding documentation"
fi

# V√©rifier les fichiers de configuration Git
log "Checking Git configuration..."

if [ -f ".gitignore" ]; then
    success ".gitignore found"
else
    warning ".gitignore not found"
fi

# V√©rifier les hooks
if [ -d "hooks" ]; then
    success "Git hooks directory found"
else
    warning "Git hooks directory not found"
fi

# R√©sum√© final
log "Pre-push checks completed!"

# Afficher un r√©sum√©
echo "=================================="
echo "üìä Pre-push Summary:"
echo "=================================="
echo "‚úÖ Repository size: $repo_size"
echo "‚úÖ Current branch: $current_branch"
echo "‚úÖ Production config: $(if [ -f "backend/settings_production.py" ]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
echo "‚úÖ Docker config: $(if [ -f "docker-compose.production.yml" ]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
echo "‚úÖ Documentation: $(if [ -f "README.md" ]; then echo "‚úÖ"; else echo "‚ùå"; fi)"
echo "=================================="

success "All pre-push checks completed! üöÄ"
echo "Ready to push to remote repository!"
